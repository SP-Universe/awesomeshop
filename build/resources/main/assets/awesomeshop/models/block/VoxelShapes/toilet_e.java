Stream.of(
Block.makeCuboidShape(0, 0, 6, 10, 5, 7),
Block.makeCuboidShape(0, 4, 7, 4, 17, 9),
Block.makeCuboidShape(0, 5, 10, 11, 7, 12),
Block.makeCuboidShape(0, 7, 11, 11, 9, 13),
Block.makeCuboidShape(0, 8, 2, 12, 11, 4),
Block.makeCuboidShape(0, 7, 3, 11, 9, 5),
Block.makeCuboidShape(0, 8, 12, 12, 11, 14),
Block.makeCuboidShape(0, 5, 4, 11, 7, 6),
Block.makeCuboidShape(13, 9, 4, 14, 11, 12),
Block.makeCuboidShape(10, 7, 4, 12, 8, 12),
Block.makeCuboidShape(9, 5, 6, 11, 7, 10),
Block.makeCuboidShape(12, 8, 3, 13, 11, 13),
Block.makeCuboidShape(11, 8, 4, 12, 9, 12),
Block.makeCuboidShape(0, 0, 9, 10, 5, 10),
Block.makeCuboidShape(8, 0, 7, 10, 5, 9),
Block.makeCuboidShape(0, 0, 7, 8, 2, 9),
Block.makeCuboidShape(0, 5, 6, 4, 17, 7),
Block.makeCuboidShape(0, 7, 5, 4, 17, 6),
Block.makeCuboidShape(0, 9, 4, 4, 17, 5),
Block.makeCuboidShape(0, 11, 2, 4, 16, 4),
Block.makeCuboidShape(0, 5, 9, 4, 17, 10),
Block.makeCuboidShape(0, 7, 10, 4, 17, 11),
Block.makeCuboidShape(0, 9, 11, 4, 17, 12),
Block.makeCuboidShape(0, 11, 12, 4, 16, 14),
Block.makeCuboidShape(1, 17, 5, 3, 18, 7),
Block.makeCuboidShape(11, 8, 11, 12, 11, 12),
Block.makeCuboidShape(11, 8, 4, 12, 11, 5),
Block.makeCuboidShape(4, 4, 7, 6, 5, 9)
).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);});