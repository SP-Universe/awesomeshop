Stream.of(
Block.makeCuboidShape(6, 0, 9, 16, 5, 10),
Block.makeCuboidShape(12, 4, 7, 16, 17, 9),
Block.makeCuboidShape(5, 5, 4, 16, 7, 6),
Block.makeCuboidShape(5, 7, 3, 16, 9, 5),
Block.makeCuboidShape(4, 8, 12, 16, 11, 14),
Block.makeCuboidShape(5, 7, 11, 16, 9, 13),
Block.makeCuboidShape(4, 8, 2, 16, 11, 4),
Block.makeCuboidShape(5, 5, 10, 16, 7, 12),
Block.makeCuboidShape(2, 9, 4, 3, 11, 12),
Block.makeCuboidShape(4, 7, 4, 6, 8, 12),
Block.makeCuboidShape(5, 5, 6, 7, 7, 10),
Block.makeCuboidShape(3, 8, 3, 4, 11, 13),
Block.makeCuboidShape(4, 8, 4, 5, 9, 12),
Block.makeCuboidShape(6, 0, 6, 16, 5, 7),
Block.makeCuboidShape(6, 0, 7, 8, 5, 9),
Block.makeCuboidShape(8, 0, 7, 16, 2, 9),
Block.makeCuboidShape(12, 5, 9, 16, 17, 10),
Block.makeCuboidShape(12, 7, 10, 16, 17, 11),
Block.makeCuboidShape(12, 9, 11, 16, 17, 12),
Block.makeCuboidShape(12, 11, 12, 16, 16, 14),
Block.makeCuboidShape(12, 5, 6, 16, 17, 7),
Block.makeCuboidShape(12, 7, 5, 16, 17, 6),
Block.makeCuboidShape(12, 9, 4, 16, 17, 5),
Block.makeCuboidShape(12, 11, 2, 16, 16, 4),
Block.makeCuboidShape(13, 17, 9, 15, 18, 11),
Block.makeCuboidShape(4, 8, 4, 5, 11, 5),
Block.makeCuboidShape(4, 8, 11, 5, 11, 12),
Block.makeCuboidShape(10, 4, 7, 12, 5, 9)
).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);});