Stream.of(
Block.makeCuboidShape(0, 0, 0, 16, 1, 8),
Block.makeCuboidShape(3, 1, 0, 13, 9, 1),
Block.makeCuboidShape(0, 9, 0, 16, 10, 8),
Block.makeCuboidShape(2, 10, 0, 14, 11, 8),
Block.makeCuboidShape(4, 11, 0, 12, 12, 6),
Block.makeCuboidShape(5, 12, 0, 11, 18, 1),
Block.makeCuboidShape(5, 12, 3, 11, 18, 4),
Block.makeCuboidShape(5, 12, 1, 6, 18, 3),
Block.makeCuboidShape(10, 12, 1, 11, 18, 3),
Block.makeCuboidShape(4, 9, 8, 12, 10, 10),
Block.makeCuboidShape(3, 8, 9, 5, 9, 10),
Block.makeCuboidShape(11, 8, 9, 13, 9, 10),
Block.makeCuboidShape(13, 1, 0, 16, 9, 8),
Block.makeCuboidShape(1, 1, 8, 4, 10, 9),
Block.makeCuboidShape(12, 1, 8, 15, 10, 9),
Block.makeCuboidShape(0, 1, 0, 3, 9, 8),
Block.makeCuboidShape(1, 0, 8, 15, 1, 9),
Block.makeCuboidShape(5, 0, 10, 11, 1, 11),
Block.makeCuboidShape(3, 0, 9, 13, 1, 10),
Block.makeCuboidShape(4, 3, 8, 12, 4, 9),
Block.makeCuboidShape(9, 1, 8, 10, 3, 9),
Block.makeCuboidShape(6, 1, 8, 7, 3, 9)
).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);});