Stream.of(
Block.makeCuboidShape(6, 0, 6, 7, 5, 16),
Block.makeCuboidShape(7, 4, 12, 9, 17, 16),
Block.makeCuboidShape(10, 5, 5, 12, 7, 16),
Block.makeCuboidShape(11, 7, 5, 13, 9, 16),
Block.makeCuboidShape(2, 8, 4, 4, 11, 16),
Block.makeCuboidShape(3, 7, 5, 5, 9, 16),
Block.makeCuboidShape(12, 8, 4, 14, 11, 16),
Block.makeCuboidShape(4, 5, 5, 6, 7, 16),
Block.makeCuboidShape(4, 9, 2, 12, 11, 3),
Block.makeCuboidShape(4, 7, 4, 12, 8, 6),
Block.makeCuboidShape(6, 5, 5, 10, 7, 7),
Block.makeCuboidShape(3, 8, 3, 13, 11, 4),
Block.makeCuboidShape(4, 8, 4, 12, 9, 5),
Block.makeCuboidShape(9, 0, 6, 10, 5, 16),
Block.makeCuboidShape(7, 0, 6, 9, 5, 8),
Block.makeCuboidShape(7, 0, 8, 9, 2, 16),
Block.makeCuboidShape(6, 5, 12, 7, 17, 16),
Block.makeCuboidShape(5, 7, 12, 6, 17, 16),
Block.makeCuboidShape(4, 9, 12, 5, 17, 16),
Block.makeCuboidShape(2, 11, 12, 4, 16, 16),
Block.makeCuboidShape(9, 5, 12, 10, 17, 16),
Block.makeCuboidShape(10, 7, 12, 11, 17, 16),
Block.makeCuboidShape(11, 9, 12, 12, 17, 16),
Block.makeCuboidShape(12, 11, 12, 14, 16, 16),
Block.makeCuboidShape(5, 17, 13, 7, 18, 15),
Block.makeCuboidShape(11, 8, 4, 12, 11, 5),
Block.makeCuboidShape(4, 8, 4, 5, 11, 5),
Block.makeCuboidShape(7, 4, 10, 9, 5, 12)
).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);});