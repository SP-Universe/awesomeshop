Stream.of(
Block.makeCuboidShape(0, 0, 0, 8, 1, 16),
Block.makeCuboidShape(0, 1, 3, 1, 9, 13),
Block.makeCuboidShape(0, 9, 0, 8, 10, 16),
Block.makeCuboidShape(0, 10, 2, 8, 11, 14),
Block.makeCuboidShape(0, 11, 4, 6, 12, 12),
Block.makeCuboidShape(0, 12, 5, 1, 18, 11),
Block.makeCuboidShape(3, 12, 5, 4, 18, 11),
Block.makeCuboidShape(1, 12, 10, 3, 18, 11),
Block.makeCuboidShape(1, 12, 5, 3, 18, 6),
Block.makeCuboidShape(8, 9, 4, 10, 10, 12),
Block.makeCuboidShape(9, 8, 11, 10, 9, 13),
Block.makeCuboidShape(9, 8, 3, 10, 9, 5),
Block.makeCuboidShape(0, 1, 0, 8, 9, 3),
Block.makeCuboidShape(8, 1, 12, 9, 10, 15),
Block.makeCuboidShape(8, 1, 1, 9, 10, 4),
Block.makeCuboidShape(0, 1, 13, 8, 9, 16),
Block.makeCuboidShape(8, 0, 1, 9, 1, 15),
Block.makeCuboidShape(10, 0, 5, 11, 1, 11),
Block.makeCuboidShape(9, 0, 3, 10, 1, 13),
Block.makeCuboidShape(8, 3, 4, 9, 4, 12),
Block.makeCuboidShape(8, 1, 6, 9, 3, 7),
Block.makeCuboidShape(8, 1, 9, 9, 3, 10)
).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);});