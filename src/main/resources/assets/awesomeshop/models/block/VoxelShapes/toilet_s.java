Stream.of(
Block.makeCuboidShape(9, 0, 0, 10, 5, 10),
Block.makeCuboidShape(7, 4, 0, 9, 17, 4),
Block.makeCuboidShape(4, 5, 0, 6, 7, 11),
Block.makeCuboidShape(3, 7, 0, 5, 9, 11),
Block.makeCuboidShape(12, 8, 0, 14, 11, 12),
Block.makeCuboidShape(11, 7, 0, 13, 9, 11),
Block.makeCuboidShape(2, 8, 0, 4, 11, 12),
Block.makeCuboidShape(10, 5, 0, 12, 7, 11),
Block.makeCuboidShape(4, 9, 13, 12, 11, 14),
Block.makeCuboidShape(4, 7, 10, 12, 8, 12),
Block.makeCuboidShape(6, 5, 9, 10, 7, 11),
Block.makeCuboidShape(3, 8, 12, 13, 11, 13),
Block.makeCuboidShape(4, 8, 11, 12, 9, 12),
Block.makeCuboidShape(6, 0, 0, 7, 5, 10),
Block.makeCuboidShape(7, 0, 8, 9, 5, 10),
Block.makeCuboidShape(7, 0, 0, 9, 2, 8),
Block.makeCuboidShape(9, 5, 0, 10, 17, 4),
Block.makeCuboidShape(10, 7, 0, 11, 17, 4),
Block.makeCuboidShape(11, 9, 0, 12, 17, 4),
Block.makeCuboidShape(12, 11, 0, 14, 16, 4),
Block.makeCuboidShape(6, 5, 0, 7, 17, 4),
Block.makeCuboidShape(5, 7, 0, 6, 17, 4),
Block.makeCuboidShape(4, 9, 0, 5, 17, 4),
Block.makeCuboidShape(2, 11, 0, 4, 16, 4),
Block.makeCuboidShape(9, 17, 1, 11, 18, 3),
Block.makeCuboidShape(4, 8, 11, 5, 11, 12),
Block.makeCuboidShape(11, 8, 11, 12, 11, 12),
Block.makeCuboidShape(7, 4, 4, 9, 5, 6)
).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);});